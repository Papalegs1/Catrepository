Cats CRUD API

Description

This is a simple CRUD (Create, Read, Update, Delete) API for managing Cat objects. It allows you to create, retrieve, update, and delete cats in a database. This application uses Spring Boot and Jakarta Persistence API (JPA) for object-relational mapping with a MySQL database.

Version
0.1.0

Installation

Clone the Project:
Clone the repository from GitHub:
git clone https://github.com/your-repository/cats-crud-api.git
OR download the ZIP and extract it to your local directory.
Setup Database:
This project uses a MySQL database. Ensure that MySQL is installed and running.
Create a database called cat-database in your MySQL instance or modify the database name in the application.properties file to match an existing database.
Database Configuration:
Edit the src/main/resources/application.properties file to configure your MySQL database connection.
Example:
spring.datasource.url=jdbc:mysql://localhost:3306/cat-database
spring.datasource.username=root
spring.datasource.password=root
Ensure the database credentials (username and password) are correct in this file.
Build and Run the Project:
Open the project in your preferred IDE (e.g., IntelliJ IDEA).
Build and run the project using JDK 21 or a compatible version.
On running, the application will automatically create the necessary tables in the database.
Entity Class

Cat.java
The Cat class is annotated as a JPA entity, meaning it will be mapped to a table in the MySQL database. The fields of the Cat class will correspond to the columns of the cats table.

Fields:

catId: Primary Key for the Cat entity, auto-generated by the database.
name: The name of the cat (required).
description: A description of the cat.
breed: The breed of the cat (required).
age: The age of the cat (required).
activeDate: The date the cat became active (required).
Example Cat Object:
public class Cat {
    private int catId;
    private String name;
    private String description;
    private String breed;
    private double age;
    private Date activeDate;
}
API Endpoints

Base URL
http://localhost:8080/animals
Endpoint Descriptions
1. Get All Animals:

URL: /animals/all
Method: GET
Description: Retrieves a list of all animals (cats) in the database.
Response:

[
  {
    "catId": 1,
    "name": "Whiskers",
    "description": "A playful cat",
    "breed": "Siamese",
    "age": 2.5,
    "activeDate": "2023-01-01"
  },
  {
    "catId": 2,
    "name": "Mittens",
    "description": "A curious cat",
    "breed": "Persian",
    "age": 3.0,
    "activeDate": "2022-08-20"
  }
]
2. Get Animal by ID:

URL: /animals/{catId}
Method: GET
Description: Retrieves a specific cat by its unique catId.
Response:

{
  "catId": 1,
  "name": "Whiskers",
  "description": "A playful cat",
  "breed": "Siamese",
  "age": 2.5,
  "activeDate": "2023-01-01"
}
3. Get Animals by Name:

URL: /animals/name?search={name}
Method: GET
Description: Retrieves a list of cats with names containing the specified search string.
Parameters:

search: The string to search for in cat names.
Response:

[
  {
    "catId": 1,
    "name": "Whiskers",
    "description": "A playful cat",
    "breed": "Siamese",
    "age": 2.5,
    "activeDate": "2023-01-01"
  }
]
4. Get Animals by Breed:

URL: /animals/breed?search={breed}
Method: GET
Description: Retrieves a list of cats with the specified breed.
Parameters:

search: The breed of the cats to search for.
Response:

[
  {
    "catId": 1,
    "name": "Whiskers",
    "description": "A playful cat",
    "breed": "Siamese",
    "age": 2.5,
    "activeDate": "2023-01-01"
  }
]
5. Create a New Animal (Cat):

URL: /animals/new
Method: POST
Description: Creates a new cat record in the database.
Request Body:

{
  "name": "Luna",
  "description": "A calm and friendly cat",
  "breed": "Bengal",
  "age": 1.5,
  "activeDate": "2024-01-15"
}
Response:

[
  {
    "catId": 1,
    "name": "Whiskers",
    "description": "A playful cat",
    "breed": "Siamese",
    "age": 2.5,
    "activeDate": "2023-01-01"
  },
  {
    "catId": 2,
    "name": "Mittens",
    "description": "A curious cat",
    "breed": "Persian",
    "age": 3.0,
    "activeDate": "2022-08-20"
  },
  {
    "catId": 3,
    "name": "Luna",
    "description": "A calm and friendly cat",
    "breed": "Bengal",
    "age": 1.5,
    "activeDate": "2024-01-15"
  }
]
6. Update an Existing Animal:

URL: /animals/update/{catId}
Method: PUT
Description: Updates the details of an existing cat by its catId.
Request Body:

{
  "name": "Luna",
  "description": "An updated description for Luna",
  "breed": "Bengal",
  "age": 2.0,
  "activeDate": "2024-02-01"
}
Response:

{
  "catId": 3,
  "name": "Luna",
  "description": "An updated description for Luna",
  "breed": "Bengal",
  "age": 2.0,
  "activeDate": "2024-02-01"
}
7. Delete an Animal:

URL: /animals/delete/{catId}
Method: DELETE
Description: Deletes an existing cat by its catId.
Response:

[
  {
    "catId": 1,
    "name": "Whiskers",
    "description": "A playful cat",
    "breed": "Siamese",
    "age": 2.5,
    "activeDate": "2023-01-01"
  },
  {
    "catId": 2,
    "name": "Mittens",
    "description": "A curious cat",
    "breed": "Persian",
    "age": 3.0,
    "activeDate": "2022-08-20"
  }
]
